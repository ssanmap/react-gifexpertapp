{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GiffExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","categ","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GiffExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGTC,mBAAS,IAHA,mBAGtCC,EAHsC,KAG1BC,EAH0B,KAwB7C,OAGQ,0BAAMC,SAfO,SAACC,GAClBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAK,OAAMP,GAAN,mBAAqBO,OAEzCN,EAAc,OAQT,2BAAOO,MAAOR,EAAYS,SAvBZ,SAACN,GAIxBF,EAAcE,EAAEO,OAAOF,Y,uBCZlBG,EAAM,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACZC,EADY,iDACqCC,UAAUH,GAD/C,+DAECI,MAAMF,GAFP,cAEZG,EAFY,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KAEDC,EAAOD,EAAKE,KAAM,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATxB,kBAeXM,GAfW,4CAAH,sDCENO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,yBAAKc,UAAU,yCAEZ,yBAAKC,IAAOf,EAAMgB,IAAON,IACzB,+BAAKA,KCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAAEA,GAAc,IAAD,EAEdb,mBAAS,CAClCoB,KAAM,GACNa,SAAQ,IAJ+B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAwBxC,OAlBHC,qBAAU,WACNxB,EAAQC,GACPwB,MAAM,SAAAC,GAICH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAOrB,CAAEpB,IAGKqB,EDpByBK,CAAc1B,GAAjCa,EAHuB,EAG5BN,KAAaa,EAHe,EAGfA,QAapB,OACI,oCACI,gCAAMpB,EAAN,KACEoB,GAAW,uBAAGJ,UAAU,sDAAb,YAET,yBAAKA,UAAW,aAGAH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACAiB,IAAOjB,EAAIC,IACVD,UE7BxBkB,EAAgB,WAAM,MAGKzC,mBAAS,CAAC,cAHf,mBAGxB0C,EAHwB,KAGZ3C,EAHY,KAQ/B,OACI,6BACI,qDACA,kBAAC,EAAD,CAAaA,cAAkBA,IAC/B,6BAGA,4BAEI2C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACA2B,IAAO3B,EACNA,SAAYA,U,MClBjC8B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.59560e67.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( {setCategories}) => {\r\n\r\n    // dejar con comillas simples para q sea un string, no undefined\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handdleInputChange = (e) => \r\n    {\r\n        // console.log(e.target.value);\r\n        // cuando cambie lo dentro del input\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        // para no recargar la pagina \r\n        // alert('submit hecho')\r\n        if( inputValue.trim().length > 2){\r\n            // quitarle los espacios e insertar lo que digite\r\n            setCategories( categ => [ inputValue, ...categ]);   \r\n            // limpiar\r\n            setinputValue('');\r\n        }\r\n       \r\n    }\r\n    return (\r\n       \r\n    \r\n            <form onSubmit={handleSubmit}>\r\n                 <input value={inputValue} onChange= { handdleInputChange}></input>\r\n            </form>\r\n       \r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}","export const getGif = async ( category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=YPKmT6XgpBCjrqlCEfzbwsRZgp3noy37`;\r\n    const resp = await fetch(url );\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map ( img => {\r\n        return {\r\n            id:img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    // console.log(gifs);\r\n    // setimages(gifs);\r\n    // set imagenes\r\n    return gifs;\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    // console.log({id, title, url})\r\n    return (\r\n        <div className=\"card animate__animated animate__flip \">\r\n           {/*  {img.title} */}\r\n           <img src= { url } alt = {title} />\r\n           <p> {title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n// import { useFetchGifs } from '../hooks/useFetchGifs';\r\n// import { getGif } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    // const [count, setcount] = useState(0)\r\n    const {data:images, loading} = useFetchGifs( category);\r\n    \r\n\r\n    \r\n   /*  const [images, setimages] = useState([]);\r\n    useEffect( () => {\r\n        // getGif();\r\n        getGif(category)\r\n        .then( setimages);\r\n    }, [ category]) */\r\n\r\n   \r\n    // getGif();\r\n    return (\r\n        <>\r\n            <h3> {category} </h3>\r\n            { loading && <p className=\"card animate__animated animate__lightSpeedOutRight\"> Loading</p> }\r\n          \r\n                <div className= \"card-grid\">\r\n          \r\n                        {\r\n                                images.map( img => (\r\n                                    <GifGridItem  \r\n                                    key = {img.id}\r\n                                {... img }\r\n                                />\r\n                                // <li key = { id}> {title}</li>\r\n                                ))\r\n                            }\r\n                    \r\n                         {/* <h4> {count}</h4>\r\n                        <button onClick= { () => setcount (count + 1 )}> </button>  */}\r\n                 </div>\r\n                 </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGif } from \"../helpers/getGifs\";\r\n// import {getGifs} from '../helpers/getGifs';\r\n// import {getGifs} from './helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n\r\n   const [state, setstate] = useState({\r\n    data: [],\r\n    loading:true\r\n   });\r\nuseEffect(() => {\r\n    getGif( category)\r\n    .then( imgs =>{\r\n\r\n        // setTimeout( () => {\r\n\r\n            setstate({\r\n                data:imgs,\r\n                loading:false\r\n            });\r\n\r\n        // }, 3000);\r\n       \r\n    })\r\n  \r\n}, [ category])\r\n\r\n\r\n   return state; \r\n\r\n   \r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GiffExpertApp = () => {\r\n\r\n    // const  categories = ['One Punch', 'Dragon Ball', 'Samurai X'];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n    \r\n    // const handleAdd = () =>{\r\n    // setCategories ([...categories,'Naruto' ])\r\n    // }\r\n    return (\r\n        <div>\r\n            <h2> Hola Giff Expert APP</h2>\r\n            <AddCategory setCategories = { setCategories} />\r\n            <hr></hr>\r\n\r\n            {/* <button onClick= {handleAdd}> Agregar </button> */}\r\n            <ul>\r\n            {\r\n                categories.map( category => (\r\n                    <GifGrid\r\n                    key = {category}\r\n                     category = {category} />\r\n                ))\r\n            }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GiffExpertApp } from './GiffExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GiffExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}